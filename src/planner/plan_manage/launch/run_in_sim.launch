<launch>
    <!-- size of map, change the size inflate x, y, z according to your application -->
    <arg name="map_size_x"/>
    <arg name="map_size_y"/>
    <arg name="map_size_z"/>
    <arg name="config_file" />

    <arg name="point0_x"/>
    <arg name="point0_y"/>
    <arg name="point0_z"/>
    <arg name="point1_x"/>
    <arg name="point1_y"/>
    <arg name="point1_z"/>
    <arg name="point2_x"/>
    <arg name="point2_y"/>
    <arg name="point2_z"/>
    
    <arg name="drone_id"/>
    <arg name="formation_type"/>
    <arg name="weight_obstacle"/>
    <arg name="weight_swarm"/>
    <arg name="weight_feasibility"/>
    <arg name="weight_sqrvariance"/>
    <arg name="weight_time"/>
    <arg name="weight_formation"/>
    <arg name="obstacle_clearance"/>
    <arg name="swarm_clearance"/>
    <arg name="replan_trajectory_time"/>
    
    <!-- topic of your odometry such as VIO or LIO -->
    <arg name="odom_topic"/>
    <!-- number of moving objects -->
    <!-- <arg name="obj_num" value="8" /> -->
    <!-- main algorithm params -->
    <include file="$(find ego_planner)/launch/advanced_param.xml">
        <arg name="config_file" value="$(arg config_file)"/>
        <arg name="drone_id"                value="$(arg drone_id)"/>
        <!-- <arg name="formation_type"          value="$(arg formation_type)"/> -->
        <arg name="map_size_x_"             value="$(arg map_size_x)"/>
        <arg name="map_size_y_"             value="$(arg map_size_y)"/>
        <arg name="map_size_z_"             value="$(arg map_size_z)"/>
        <!-- <arg name="weight_obstacle"         value="$(arg weight_obstacle)"/>
        <arg name="weight_swarm"            value="$(arg weight_swarm)"/>
        <arg name="weight_feasibility"      value="$(arg weight_feasibility)"/>
        <arg name="weight_sqrvariance"      value="$(arg weight_sqrvariance)"/>
        <arg name="weight_time"             value="$(arg weight_time)"/>
        <arg name="weight_formation"        value="$(arg weight_formation)"/> -->
        <!-- <arg name="obstacle_clearance"      value="$(arg obstacle_clearance)"/> -->
        <!-- <arg name="swarm_clearance"         value="$(arg swarm_clearance)"/> -->
        <!-- <arg name="replan_trajectory_time"  value="$(arg replan_trajectory_time)"/> -->

        <!-- camera pose: transform of camera frame in the world frame -->
        <!-- depth topic: depth image, 640x480 by default -->
        <!-- don't set cloud_topic if you already set these ones! -->
        <arg name="odometry_topic" value="$(arg odom_topic)"/>
        <!-- <arg name="obj_num_set" value="$(arg obj_num)" /> -->
        <arg name="camera_pose_topic" value="pcl_render_node/camera_pose"/>
        <arg name="depth_topic" value="pcl_render_node/depth"/>
        <!-- topic of point cloud measurement, such as from LIDAR  -->
        <!-- don't set camera pose and depth, if you already set this one! -->
        <arg name="cloud_topic" value="pcl_render_node/cloud"/>
        <!-- intrinsic params of the depth camera -->
        <arg name="cx" value="321.04638671875"/>
        <arg name="cy" value="243.44969177246094"/>
        <arg name="fx" value="387.229248046875"/>
        <arg name="fy" value="387.229248046875"/>
        <!-- maximum velocity and acceleration the drone will reach -->

        <arg name="local_update_range_x" value="8" />
        <arg name="local_update_range_y" value="8" />
        <arg name="local_update_range_z" value="8" />
        <!--always set to 1.5 times grater than sensing horizen-->

        <arg name="planning_horizon" value="12" />
        <arg name="local_map_margin" value="12" />

        <arg name="use_distinctive_trajs" value="false" />
        <!-- 3: use 2D Nav Goal to select goal  -->
        <!-- 2: use global waypoints below  -->
        <!-- need to add -->
        <arg name="flight_type" value="3" />
        <!-- global waypoints -->
        <!-- It generates a piecewise min-snap traj passing all waypoints -->
        <arg name="point_num" value="-1" />
        <arg name="point0_x" value="0.0" />
        <arg name="point0_y" value="0.0" />
        <arg name="point0_z" value="0.0" />

        <arg name="point1_x" value="0.0" />
        <arg name="point1_y" value="0.0" />
        <arg name="point1_z" value="0.0" />

        <arg name="point2_x" value="0.0" />
        <arg name="point2_y" value="0.0" />
        <arg name="point2_z" value="0.0" />

        <arg name="point3_x" value="0.0" />
        <arg name="point3_y" value="0.0" />
        <arg name="point3_z" value="0.0" />

    </include>
    <!-- trajectory server -->
    <node pkg="ego_planner" name="drone_$(arg drone_id)_traj_server" type="traj_server" output="screen">
        <remap from="position_cmd" to="drone_$(arg drone_id)_planning/pos_cmd"/>
        <remap from="~planning/trajectory" to="drone_$(arg drone_id)_planning/trajectory"/>
        <remap from="~planning/start" to="drone_$(arg drone_id)_planning/start"/>
        <remap from="~planning/finish" to="drone_$(arg drone_id)_planning/finish"/>
        <param name="traj_server/time_forward" value="1.0" type="double"/>
    </node>
    <!-- use simulator -->
  <node pkg="odom_visualization" name="drone_$(arg drone_id)_odom_visualization" type="odom_visualization">
        <remap from="~odom" to="drone_$(arg drone_id)_visual_slam/odom"/>
        <param name="color/a" value="1.0"/>
        <param name="color/r" value="0.0"/>
        <param name="color/g" value="0.0"/>
        <param name="color/b" value="0.0"/>
        <param name="covariance_scale" value="100.0"/>
        <param name="robot_scale" value="1.0"/>
        <param name="tf45" value="false"/>
        <param name="drone_id" value="drone_id"/>
  </node>

    <node pkg="airsim_package" name="airsim_$(arg drone_id)_bridge_cmd" type="bridge_cmd.py" output="screen" >
        <param name="drone_id"                          value="$(arg drone_id)"/>
    </node>

    <node pkg="airsim_package" name="airsim_$(arg drone_id)_bridge_odom" type="bridge_odom.py" output="screen" >
        <param name="drone_id"                          value="$(arg drone_id)"/>
    </node>

    <node pkg="airsim_package" name="airsim_$(arg drone_id)_bridge_lidar" type="bridge_lidar.py" output="screen" >
        <param name="drone_id"                          value="$(arg drone_id)"/>
    </node>

</launch>